{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","monster","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","monsters","map","card_component_Card","key","Search","placeholder","type","onInputChange","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","defineProperty","target","value","filterMonsters","_this$state","state","search","filter","toLowerCase","includes","fetch","res","json","users","console","error","_context","t0","search_component_Search","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAIaA,SAAO,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QAErB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAQQ,GAAlC,4BACtBP,EAAAC,EAAAC,cAAA,UAAKH,EAAQS,MACbR,EAAAC,EAAAC,cAAA,SAAIH,EAAQU,UCLLC,SAAW,SAAAZ,GAAkB,IAAfa,EAAeb,EAAfa,SAKzB,OAAOX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAHbQ,EAASC,IAAI,SAAAb,GAAO,OAAIC,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKf,EAAQQ,GAAIR,QAASA,SCHtDgB,eAAS,SAAAjB,GAAA,IAAGkB,EAAHlB,EAAGkB,YAAaR,EAAhBV,EAAgBU,KAAMS,EAAtBnB,EAAsBmB,KAAMC,EAA5BpB,EAA4BoB,cAA5B,OAElBlB,EAAAC,EAAAC,cAAA,SACMiB,SAAUD,EACVV,KAAMA,EACNS,KAAMA,EACND,YAAaA,EACbb,UAAU,aC4CLiB,cAhDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAkBFN,cAAgB,SAAAU,GACdP,EAAKQ,SAALP,OAAAQ,EAAA,EAAAR,CAAA,GACGM,EAAEG,OAAOvB,KAAOoB,EAAEG,OAAOC,SArBhBX,EAyBdY,eAAiB,WAAM,IAAAC,EACQb,EAAKc,MAA1BxB,EADauB,EACbvB,SAAUyB,EADGF,EACHE,OAClB,OAAOzB,EAAS0B,OAAO,SAAAtC,GAAO,OAC5BA,EAAQS,KAAK8B,cAAcC,SAASH,EAAOE,kBAzB7CjB,EAAKc,MAAQ,CACXxB,SAAU,GACVyB,OAAQ,IALEf,4NAWQmB,MAAK,4DAAjBC,kBACcA,EAAIC,cAAlBC,SACNnB,KAAKK,SAAS,CAAElB,SAAUgC,sDAE1BC,QAAQC,MAARC,EAAAC,iJAkBF,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAC8C,EAAD,CACE/B,KAAK,SACLT,KAAK,SACLQ,YAAY,kBACZE,cAAeM,KAAKN,gBAEtBlB,EAAAC,EAAAC,cAAC+C,EAAD,CAAUtC,SAAUa,KAAKS,2BA3CfiB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.551e730f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = ({ monster }) => {\r\n\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = ({ monsters }) => {\r\n  const renderMonsters = () => {\r\n    return monsters.map(monster => <Card key={monster.id} monster={monster} />);\r\n  };\r\n\r\n  return <div className=\"card-list\">{renderMonsters()}</div>\r\n}","import React, {} from 'react';\r\n\r\nimport './search.styles.css';\r\n\r\nexport const Search = ({ placeholder, name, type, onInputChange }) => (\r\n  \r\n    <input\r\n          onChange={onInputChange}\r\n          name={name}\r\n          type={type}\r\n          placeholder={placeholder}\r\n          className='search'\r\n        />\r\n  \r\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\n\nimport './App.css';\nimport { Search } from './components/search/search.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      search: '',\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(`https://jsonplaceholder.typicode.com/users`);\n      const users = await res.json();\n      this.setState({ monsters: users });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  onInputChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  filterMonsters = () => {\n    const { monsters, search } = this.state;\n    return monsters.filter(monster =>\n      monster.name.toLowerCase().includes(search.toLowerCase())\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <Search\n          type=\"search\"\n          name=\"search\"\n          placeholder=\"Search Monsters\"\n          onInputChange={this.onInputChange}\n        />\n        <CardList monsters={this.filterMonsters()} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}